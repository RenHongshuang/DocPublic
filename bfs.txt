// 求矩阵上两个点的最短距离
// 僵尸感染思想
// 矩阵
// 起始只有一个人感染，只能感染上下左右四个方向上相邻的人，不能重复感染，一次只能感染一个
/*
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 5 1 1 1 1 1
1 1 1 5 4 5 1 1 1 1 
1 1 5 4 3 4 5 1 1 1
1 5 4 3 2 3 4 5 1 1 
1 1 5 4 3 4 5 1 1 1
1 1 1 5 4 5 1 1 1 1 
1 1 1 1 5 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 
1 1 1 1 1 1 1 1 1 1
*/


// 矩阵上点的可达性问题
// 两个点的最短距离
// 能记录一条最短路径


// 这个程序输出被感染后的棋盘
#include <iostream>
using namespace std;


#define SIZE 8

typedef struct Node{	
	int x;
	int y; 
};

int map[SIZE][SIZE]={0,};

Node queue[SIZE*SIZE];
int head;
int tail;


//小技巧:查表法
//       （0,1） 
//          ↑
//(-1，0)←(0,0) → (1,0）
//          ↓
//	     （0,-1）

int offset_x[4]={0,1,0,-1};
int offset_y[4]={1,0,-1,0};

void bfs(int x,int y){
	Node tempNode;
	tempNode.x =x;
	tempNode.y =y;
	// 将头结进队
	queue[head] = tempNode;
	tail++;
	map[x][y] =2;

	// 队列空时 退出循环
	while(head<tail)
	{
		// 将队头出队
		Node headNode = queue[head];
		head ++;
		for(int i =0;i<4;i++){
			tempNode.x = headNode.x + offset_x[i];
			tempNode.y = headNode.y + offset_y[i];
			// 不越界并且没有被感染过
			if(tempNode.x>=0 && tempNode.x<SIZE && tempNode.y>=0 && tempNode.y <SIZE &&map[tempNode.x][tempNode.y] ==1){
				map[tempNode.x][tempNode.y]= map[headNode.x][headNode.y]+1;
				// 进队
				queue[tail]= tempNode;
				tail++;
			}		
		}
	}
}

int main(){
	for(int i= 0;i<SIZE;i++){
		for(int j=0;j<SIZE;j++){
			map[i][j] =1;
		}
	}
	bfs(5,5);
	for(int i= 0;i<SIZE;i++){
		for(int j=0;j<SIZE;j++){
			cout<<map[i][j]<< " ";
		}
		cout<<endl;
	}

	return 0;
}